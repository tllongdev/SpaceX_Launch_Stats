{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dd204cec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e6b35931.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({\n\tlaunch: { flight_number, mission_name, launch_date_local, launch_success },\n}) {\n\treturn (\n\t\t<div className='card card-body mb-3'>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-md-9'>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\tMission:{' '}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\t\t'text-success': launch_success,\n\t\t\t\t\t\t\t\t'text-danger': !launch_success,\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{mission_name}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h4>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tDate: <Moment format='YYYY-MM-DD hh:mm'>{launch_date_local}</Moment>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='col-md-3'>\n\t\t\t\t\t<Link to={`/launch/${flight_number}`} className='btn btn-secondary'>\n\t\t\t\t\t\tLaunch Details\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n\treturn (\n\t\t<div className='my-3'>\n\t\t\t<p>\n\t\t\t\t<span className='px-3 mr-2 bg-success' /> = Success\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<span className='px-3 mr-2 bg-danger' /> = Fail\n\t\t\t</p>\n\t\t</div>\n\t)\n}\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n\tquery LaunchesQuery {\n\t\tlaunches {\n\t\t\tflight_number\n\t\t\tmission_name\n\t\t\tlaunch_date_local\n\t\t\tlaunch_success\n\t\t}\n\t}\n`\nexport class Launches extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h1 className='display-4 my-3'>Launches</h1>\n\t\t\t\t<MissionKey />\n\t\t\t\t<Query query={LAUNCHES_QUERY}>\n\t\t\t\t\t{({ loading, error, data }) => {\n\t\t\t\t\t\tif (loading) return <h4>Loading...</h4>\n\t\t\t\t\t\tif (error) console.log(error)\n\t\t\t\t\t\tconsole.log(data)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{data.launches.map(launch => (\n\t\t\t\t\t\t\t\t\t<LaunchItem key={launch.flight_number} launch={launch} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Query>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Launches\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\nconst LAUNCH_QUERY = gql`\n\tquery LaunchQuery($flight_number: Int!) {\n\t\tlaunch(flight_number: $flight_number) {\n\t\t\tflight_number\n\t\t\tmission_name\n\t\t\tlaunch_year\n\t\t\tlaunch_success\n\t\t\tlaunch_date_local\n\t\t\trocket {\n\t\t\t\trocket_id\n\t\t\t\trocket_name\n\t\t\t\trocket_type\n\t\t\t}\n\t\t}\n\t}\n`\n\nexport class Launch extends Component {\n\trender() {\n\t\tlet { flight_number } = this.props.match.params\n\t\tflight_number = parseInt(flight_number)\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n\t\t\t\t\t{({ loading, error, data }) => {\n\t\t\t\t\t\tif (loading) return <h4>Loading...</h4>\n\t\t\t\t\t\tif (error) console.log(error)\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tmission_name,\n\t\t\t\t\t\t\tflight_number,\n\t\t\t\t\t\t\tlaunch_year,\n\t\t\t\t\t\t\tlaunch_success,\n\t\t\t\t\t\t\trocket: { rocket_id, rocket_name, rocket_type },\n\t\t\t\t\t\t} = data.launch\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h1 className='display-4 my-3'>\n\t\t\t\t\t\t\t\t\t<span className='text-dark'>Mission: </span>\n\t\t\t\t\t\t\t\t\t{mission_name}\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t<h4 className='mb-4'>Launch Details</h4>\n\t\t\t\t\t\t\t\t<ul className='list-group'>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\tFlight Number: {flight_number}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\tLaunch Year: {launch_year}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\tLaunch Successful:{' '}\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\t\t\t\t\t\t'text-success': launch_success,\n\t\t\t\t\t\t\t\t\t\t\t\t'text-danger': !launch_success,\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{launch_success ? 'Yes' : 'No'}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t<h4 className='my-3'>Rocket Details</h4>\n\t\t\t\t\t\t\t\t<ul className='list-group'>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>Rocket ID: {rocket_id}</li>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\tRocket Name: {rocket_name}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\tRocket Type: {rocket_type}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<Link to='/' className='btn btn-secondary'>\n\t\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Query>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Launch\n","import React from 'react'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport './App.css'\nimport logo from './logo.png'\n\nconst client = new ApolloClient({\n\turi: '/graphql',\n})\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Router>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={logo}\n\t\t\t\t\t\talt='SpaceX'\n\t\t\t\t\t\tstyle={{ width: 300, display: 'block', margin: 'auto' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path='/' component={Launches} />\n\t\t\t\t\t<Route exact path='/launch/:flight_number' component={Launch} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ApolloProvider>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}